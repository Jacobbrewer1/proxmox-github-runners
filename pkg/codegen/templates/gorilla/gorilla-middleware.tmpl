type RateLimiterFunc = func(http.ResponseWriter, *http.Request) error
type MetricsMiddlewareFunc = http.HandlerFunc
type ErrorHandlerFunc = func(http.ResponseWriter, *http.Request, error)

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
    authz ServerInterface
    handler ServerInterface
    rateLimiter RateLimiterFunc
    metricsMiddleware MetricsMiddlewareFunc
    errorHandlerFunc ErrorHandlerFunc
}

// WithAuthorization applies the passed authorization middleware to the server.
func WithAuthorization(authz ServerInterface) ServerOption {
    return func(s *ServerInterfaceWrapper) {
        s.authz = authz
    }
}

// WithRateLimiter applies the rate limiter middleware to routes with x-global-rate-limit.
func WithRateLimiter(rateLimiter RateLimiterFunc) ServerOption {
    return func(s *ServerInterfaceWrapper) {
        s.rateLimiter = rateLimiter
    }
}

// WithErrorHandlerFunc sets the error handler function for the server.
func WithErrorHandlerFunc(errorHandlerFunc ErrorHandlerFunc) ServerOption {
    return func(s *ServerInterfaceWrapper) {
        s.errorHandlerFunc = errorHandlerFunc
    }
}

// WithMetricsMiddleware applies the metrics middleware to the server.
func WithMetricsMiddleware(middleware MetricsMiddlewareFunc) ServerOption {
    return func(s *ServerInterfaceWrapper) {
        s.metricsMiddleware = middleware
    }
}

// ServerOption represents an optional feature applied to the server.
type ServerOption func(s *ServerInterfaceWrapper)

{{range .}}{{$opid := .OperationId}}

// {{$opid}} operation middleware
func (siw *ServerInterfaceWrapper) {{$opid}}(w http.ResponseWriter, r *http.Request) {
  cw := uhttp.NewClientWriter(w)
  ctx := r.Context()

  defer func() {
    if siw.metricsMiddleware != nil {
      siw.metricsMiddleware(cw, r)
    }
  }()

  {{if or .RequiresParamObject (gt (len .PathParams) 0) }}
  var err error
  {{end}}

  {{range .PathParams}}// ------------- Path parameter "{{.ParamName}}" -------------
  var {{$varName := .GoVariableName}}{{$varName}} {{.TypeDef}}
  {{if .IsPassThrough}}
  {{$varName}} = mux.Vars(r)["{{.ParamName}}"]
  {{end}}
  {{if .IsJson}}
  err = json.Unmarshal([]byte(mux.Vars(r)["{{.ParamName}}"]), &{{$varName}})
  if err != nil {
    siw.errorHandlerFunc(cw, r, &UnmarshalingParamError{ParamName: "{{.ParamName}}", Err: err})
    return
  }
  {{end}}
  {{if .IsStyled}}
  err = runtime.BindStyledParameterWithOptions("{{.Style}}", "{{.ParamName}}", mux.Vars(r)["{{.ParamName}}"], &{{$varName}}, runtime.BindStyledParameterOptions{Explode: {{.Explode}}, Required: {{.Required}}})
  if err != nil {
    siw.errorHandlerFunc(cw, r, &InvalidParamFormatError{ParamName: "{{.ParamName}}", Err: err})
    return
  }
  {{end}}

  {{end}}

  {{if .RequiresParamObject}}
    // Parameter object where we will unmarshal all parameters from the context
    var params {{.OperationId}}Params

    {{range $paramIdx, $param := .QueryParams}}
      {{- if (or (or .Required .IsPassThrough) (or .IsJson .IsStyled)) -}}
        // ------------- {{if .Required}}Required{{else}}Optional{{end}} query parameter "{{.ParamName}}" -------------
      {{ end }}
      {{ if (or (or .Required .IsPassThrough) .IsJson) }}
        if paramValue := r.URL.Query().Get("{{.ParamName}}"); paramValue != "" {

        {{if .IsPassThrough}}
          params.{{.GoName}} = {{if not .Required}}&{{end}}paramValue
        {{end}}

        {{if .IsJson}}
          var value {{.TypeDef}}
          err = json.Unmarshal([]byte(paramValue), &value)
          if err != nil {
            siw.errorHandlerFunc(cw, r, &UnmarshalingParamError{ParamName: "{{.ParamName}}", Err: err})
            return
          }

          params.{{.GoName}} = {{if not .Required}}&{{end}}value
        {{end}}
        }{{if .Required}} else {
            siw.errorHandlerFunc(cw, r, &RequiredParamError{ParamName: "{{.ParamName}}"})
            return
        }{{end}}
      {{end}}
      {{if .IsStyled}}
      err = runtime.BindQueryParameter("{{.Style}}", {{.Explode}}, {{.Required}}, "{{.ParamName}}", r.URL.Query(), &params.{{.GoName}})
      if err != nil {
        siw.errorHandlerFunc(cw, r, &InvalidParamFormatError{ParamName: "{{.ParamName}}", Err: err})
        return
      }
      {{end}}
  {{end}}

    {{if .HeaderParams}}
      headers := r.Header

      {{range .HeaderParams}}// ------------- {{if .Required}}Required{{else}}Optional{{end}} header parameter "{{.ParamName}}" -------------
        if valueList, found := headers[http.CanonicalHeaderKey("{{.ParamName}}")]; found {
          var {{.GoName}} {{.TypeDef}}
          n := len(valueList)
          if n != 1 {
            siw.errorHandlerFunc(cw, r, &TooManyValuesForParamError{ParamName: "{{.ParamName}}", Count: n})
            return
          }

        {{if .IsPassThrough}}
          params.{{.GoName}} = {{if not .Required}}&{{end}}valueList[0]
        {{end}}

        {{if .IsJson}}
          err = json.Unmarshal([]byte(valueList[0]), &{{.GoName}})
          if err != nil {
            siw.errorHandlerFunc(cw, r, &UnmarshalingParamError{ParamName: "{{.ParamName}}", Err: err})
            return
          }
        {{end}}

        {{if .IsStyled}}
          err = runtime.BindStyledParameterWithOptions("{{.Style}}", "{{.ParamName}}", valueList[0], &{{.GoName}}, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: {{.Explode}}, Required: {{.Required}}})
          if err != nil {
            siw.errorHandlerFunc(cw, r, &InvalidParamFormatError{ParamName: "{{.ParamName}}", Err: err})
            return
          }
        {{end}}

          params.{{.GoName}} = {{if not .Required}}&{{end}}{{.GoName}}

        } {{if .Required}}else {
            err = fmt.Errorf("Header parameter {{.ParamName}} is required, but not found")
            siw.errorHandlerFunc(cw, r, &RequiredHeaderError{ParamName: "{{.ParamName}}", Err: err})
            return
        }{{end}}

      {{end}}
    {{end}}

    {{range .CookieParams}}
      var cookie *http.Cookie

      if cookie, err = r.Cookie("{{.ParamName}}"); err == nil {

      {{- if .IsPassThrough}}
        params.{{.GoName}} = {{if not .Required}}&{{end}}cookie.Value
      {{end}}

      {{- if .IsJson}}
        var value {{.TypeDef}}
        var decoded string
        decoded, err := url.QueryUnescape(cookie.Value)
        if err != nil {
          err = fmt.Errorf("Error unescaping cookie parameter '{{.ParamName}}'")
          siw.errorHandlerFunc(cw, r, &UnescapedCookieParamError{ParamName: "{{.ParamName}}", Err: err})
          return
        }

        err = json.Unmarshal([]byte(decoded), &value)
        if err != nil {
          siw.errorHandlerFunc(cw, r, &UnmarshalingParamError{ParamName: "{{.ParamName}}", Err: err})
          return
        }

        params.{{.GoName}} = {{if not .Required}}&{{end}}value
      {{end}}

      {{- if .IsStyled}}
        var value {{.TypeDef}}
        err = runtime.BindStyledParameterWithOptions("simple", "{{.ParamName}}", cookie.Value, &value, runtime.BindStyledParameterOptions{Explode: {{.Explode}}, Required: {{.Required}}})
        if err != nil {
          siw.errorHandlerFunc(cw, r, &InvalidParamFormatError{ParamName: "{{.ParamName}}", Err: err})
          return
        }
        params.{{.GoName}} = {{if not .Required}}&{{end}}value
      {{end}}

      }

      {{- if .Required}} else {
        siw.errorHandlerFunc(cw, r, &RequiredParamError{ParamName: "{{.ParamName}}"})
        return
      }
      {{- end}}
    {{end}}
  {{end}}

  {{ if ne (index .Spec.Extensions "x-unauthenticated") true }}
  if siw.authz != nil {
    siw.authz.{{$opid}}(cw, r.WithContext(ctx){{genParamNames .PathParams}}{{if .RequiresParamObject}}, params{{end}})
    return
  }
  {{ end }}

  handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
    siw.handler.{{.OperationId}}(cw, r{{genParamNames .PathParams}}{{if .RequiresParamObject}}, params{{end}})
  }))

  handler.ServeHTTP(cw, r.WithContext(ctx))
}
{{end}}

type UnescapedCookieParamError struct {
    ParamName string
    Err error
}

func (e *UnescapedCookieParamError) Error() string {
    return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
    return e.Err
}

type UnmarshalingParamError struct {
    ParamName string
    Err error
}

func (e *UnmarshalingParamError) Error() string {
    return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
    return e.Err
}

type RequiredParamError struct {
    ParamName string
}

func (e *RequiredParamError) Error() string {
    return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
    ParamName string
    Err error
}

func (e *RequiredHeaderError) Error() string {
    return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
    return e.Err
}

type InvalidParamFormatError struct {
    ParamName string
	  Err error
}

func (e *InvalidParamFormatError) Error() string {
    return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
    return e.Err
}

type TooManyValuesForParamError struct {
    ParamName string
    Count int
}

func (e *TooManyValuesForParamError) Error() string {
    return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}
